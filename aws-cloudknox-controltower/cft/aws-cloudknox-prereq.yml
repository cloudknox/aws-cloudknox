AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Secrets Manager, SSM Automation, Remediation Lambda for CloudKnox

# Provisions Secrets Manager with CloudKnox Credentials
# Provisions Pre-reqs- SSM Automation Document, CloudKnox Remediation Lambda S3


# @kmmahaj
#
## License:
## This code is made available under the MIT-0 license. See the LICENSE file.



Outputs:
  CloudKnoxControlTowerKMSKeyArn:
    Description: Arn for KMS Key for encrypting cloudknox secret
    Value: !GetAtt CloudKnoxControlTowerKMSKey.Arn
    Export: # added to export
      Name: CloudKnoxControlTowerKMSKeyArn

Parameters:
  accessKey:
    Description: >-
      REQUIRED. Default Access Key for CloudKnox
    Type: String
    AllowedPattern: .+
    Default: "SAAKPTJKIVXWBHCN"
    ConstraintDescription: accessKey is required
  secretKey:
    Description: >-
      REQUIRED. Default Secret Key for CloudKnox
    Type: String
    AllowedPattern: .+
    Default: "DWUB6rnj4L7fakMB"
    ConstraintDescription: secretKey is required
  serviceId:
    Description: >-
      REQUIRED. Default Service Account ID for CloudKnox
    Type: String
    AllowedPattern: .+
    Default: "SA28FPC69M5WZANP"
    ConstraintDescription: serviceId is required
  apiId:
    Description: >-
      REQUIRED. Default API ID for CloudKnox
    Type: String
    AllowedPattern: .+
    Default: "21564ec10f7943d7eb031e74e69f1abc"
    ConstraintDescription: api Id is required
  url:
    Description: >-
      REQUIRED. Default url for CloudKnox
    Type: String
    AllowedPattern: .+
    Default: "app.cloudknox.io"
    ConstraintDescription: url is required
  CloudKnoxSecretArn:
    Description: >-
      Enter the Arn of the CloudKnox Secret if the secret is already created in Secrets Manager
    Type: String
    Default: ''


Conditions:
  CreateNewCloudKnoxSecret: !Equals 
    - !Ref CloudKnoxSecretArn
    - ''

Resources:

# S3 Bucket for CloudKnox Remediation Lambda
  S3CloudKnoxRemediationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "s3-cloudknoxiamuserrightsize-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: testing-logs
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            NoncurrentVersionExpirationInDays: 3
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: S3 Destination Bucket for CloudKnox Remediation Lambda
      VersioningConfiguration:
        Status: Enabled

  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      
  S3CloudKnoxRemediationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3CloudKnoxRemediationBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: "Allow"
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3CloudKnoxRemediationBucket}
              - !Sub arn:${AWS::Partition}:s3:::${S3CloudKnoxRemediationBucket}/*
            Principal:
              AWS:
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'


# Secrets Management - CloudKnox Credentials

  #Create Secret 
  CloudKnoxSecretString:
    Type: AWS::SecretsManager::Secret
    Condition: CreateNewCloudKnoxSecret
    Properties:
      Description: Credentials required for CloudKnox
      Name: CloudKnoxSecretString
      KmsKeyId: !GetAtt CloudKnoxControlTowerKMSKey.Arn
      SecretString:
        Fn::Join:
        - ''
        - - '{"serviceId":"'
          - Ref: serviceId
          - '","apiId": "'
          - Ref: apiId
          - '","accessKey": "'
          - Ref: accessKey
          - '","secretKey": "'
          - Ref: secretKey
          - '","url": "'
          - Ref: url
          - '","accountId": "'
          - Ref: AWS::AccountId
          - '"}'

  CloudKnoxControlTowerKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "This is KMS Key Id used to encrypt/decrypt the Secret"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub ${AWS::AccountId}
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
                kms:CallerAccount: !Sub ${AWS::AccountId}

  CloudKnoxControlTowerKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/CloudKnox-Control-Tower-${AWS::StackName}"
      TargetKeyId:
        Ref: CloudKnoxControlTowerKMSKey


