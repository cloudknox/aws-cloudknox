AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Control Tower Lifecycle Events for CloudKnox (MPCT-jqowxsqq)



# ----------------------------------------------------------------------------------------------------------
#  CloudFormation Template 1 of 1 - 
#   
#   This templates allows newly added Control Tower accounts to be managed automatically by CloudKnox
#                                  
#   This template provisions infrastructure in the AWS Control Tower Management account that allows creation of Datadog 
#   stack instances in Control Tower managed accounts whenever a new Control Tower managed account is added
#  
#  1- Creates a CloudKnox Stackset in the AWS Control Tower Management Account 
#  2- Provisions a CloudWatchEvents Rule that is triggered based on a Control Tower Lifecycle Event
#  3- Provisions a Lifecyle Lambda as a target for the CloudWatch Events Rule.
#    - The Lifecycle Lambda deploys a CloudKnox stack in the newly added Control Tower managed account--thus placing 
#      that account under CloudKnox management
#     - Lifecycle Lambda performs a POST on the CloudKnox Account Membership API  - that
#       registers the new AWS managed account in CloudKnox 
#   
##
## @kmmahaj
## @mneelka - Code review updates
#
# ------------------------------------------------------------...............................................

Parameters:
  CloudKnoxTemplateURL:
    Description: >-
      Base URL for CloudKnox CloudFormation template - CloudKnox Integration Role template
    Type: String
    Default: 'https://cloudknox-controltower-template.s3.amazonaws.com/member-account.yaml'
  SourceBucket:
    Description: S3 Bucket that contains the CloudKnox Add Account API Lambda 
    Type: String
    Default: 's3-cloudknoxiamuserrightsize-<AWS::AccountId>-<AWS::Region>'
    MinLength: '1'
    MaxLength: '255'
  CloudKnoxSentryIAMRoleName:
    Description: IAM role provisioned for CloudKnox Sentry
    Type: String
    Default: IAM_R_KNOX_SECURITY
  CloudKnoxSentryAccountId:
    Description: >-
      CloudKnox Sentry AWS Account ID
    Type: String
    Default: "341476298946"
  

Resources:

# ---------------------------------------------------------------------------------------------------
#  1- Create a CloudKnox StackSet in the Control Tower Management Account
#      - The CloudKnox StackSet is based on the CloudKnox member.yaml template that is provided by CloudKnox. 
#      - The CloudKnox member.yaml template provisions the CloudKnox Cross Account Role
# --------------------------------------------------------------------------------------------------
 
  CloudKnoxStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      Description: StackSet for creating CloudKnox Integration Role
      StackSetName: 'CloudKnoxMemberRolev1'
      Parameters:
        - ParameterKey: CloudKnoxSentryIAMRoleName
          ParameterValue: !Ref CloudKnoxSentryIAMRoleName
        - ParameterKey: CloudKnoxSentryAccountId
          ParameterValue: !Ref CloudKnoxSentryAccountId
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole']]
      ExecutionRoleName: "AWSControlTowerExecution"
      Capabilities:
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      TemplateURL: !Ref CloudKnoxTemplateURL

# --------------------------------------------------------------------------------------------------
# 
#  1- Provisions a CloudWatchEvents Rule that is triggered based on a Control Tower Lifecycle Event
#  2- Provisions a Lifecyle Lambda as a target for the CloudWatch Events Rule.
# 
# --------------------------------------------------------------------------------------------------

  CloudKnoxCaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events for CloudKnox and Trigger an Action
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          - EnableGuardrail
          - DisableGuardrail
          - SetupLandingZone
          - UpdateLandingZone
          - RegisterOrganizationalUnit
          - DeregisterOrganizationalUnit
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      Name: CloudKnoxCaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
        Id: IDCaptureControlTowerLifeCycleEvents


  #CloudKnox TriggerLifecyleEvent Lambda
  TriggerCustomizationsOnLifeCycleEvent:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join 
        - ''
        - - CloudKnox_
          - TriggerLifecyleEvent
      Role: !GetAtt CloudKnoxTriggerLifecycleEventLambdaRole.Arn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Join 
          - ''
          - - CloudKnox_TriggerLifecycleEvent
            - /
            - CloudKnox_TriggerLifecycleEvent
            - .zip
      Description: CloudKnox Control Tower Lifecycle Event Lambda
      Handler: CloudKnox_TriggerLifecycleEvent.lambda_handler
      MemorySize: 256
      Runtime: python3.7
      Environment:
        Variables:
          CloudKnoxSentryAccountId : !Ref CloudKnoxSentryAccountId
      Timeout: 300

#CloudKnox Trigger LifecyleEvent Lambda Role
  CloudKnoxTriggerLifecycleEventLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudKnoxLifecycleLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '1'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${SourceBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${SourceBucket}/*
              - Sid: '2'
                Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/CloudKnoxMemberRolev1:*']]
              - Sid: '3'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: !Join [':',['arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group', '/aws/lambda/CloudKnox_TriggerLifecyleEvent:*']]
              - Sid: '4'
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:ListSecrets'
                Effect: Allow
                Resource: !Join [':',['arn:aws:secretsmanager', !Ref 'AWS::Region', !Ref 'AWS::AccountId','secret','CloudKnoxSecretString-*']]
              - Sid: '5'
                Action:
                  - 'kms:Decrypt'
                Effect: Allow
                Resource: !ImportValue CloudKnoxControlTowerKMSKeyArn
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

    
  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CloudKnoxCaptureControlTowerLifeCycleEvents.Arn"
